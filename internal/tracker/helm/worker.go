package helm

import (
	"errors"
	"fmt"
	"image"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"runtime/debug"
	"strings"
	"sync"

	"github.com/artifacthub/hub/internal/hub"
	"github.com/artifacthub/hub/internal/license"
	"github.com/artifacthub/hub/internal/pkg"
	"github.com/artifacthub/hub/internal/tracker"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/vincent-petithory/dataurl"
	"golang.org/x/time/rate"
	"gopkg.in/yaml.v2"
	"helm.sh/helm/v3/pkg/chart"
	"helm.sh/helm/v3/pkg/chart/loader"
)

// githubRL represents a rate limiter used when loading charts from Github, to
// avoid some rate limiting issues were are experiencing.
var githubRL = rate.NewLimiter(2, 1)

// Worker is in charge of handling Helm packages register and unregister jobs
// generated by the tracker.
type Worker struct {
	svc    *tracker.Services
	r      *hub.Repository
	logger zerolog.Logger
}

// NewWorker creates a new worker instance.
func NewWorker(
	svc *tracker.Services,
	r *hub.Repository,
) *Worker {
	return &Worker{
		svc:    svc,
		r:      r,
		logger: log.With().Str("repo", r.Name).Str("kind", hub.GetKindName(r.Kind)).Logger(),
	}
}

// Run instructs the worker to start handling jobs. It will keep running until
// the jobs queue is empty or the context is done.
func (w *Worker) Run(wg *sync.WaitGroup, queue chan *Job) {
	defer wg.Done()
	for {
		select {
		case j, ok := <-queue:
			if !ok {
				return
			}
			switch j.Kind {
			case Register:
				w.handleRegisterJob(j)
			case Unregister:
				w.handleUnregisterJob(j)
			}
		case <-w.svc.Ctx.Done():
			return
		}
	}
}

// handleRegisterJob handles the provided Helm package registration job. This
// involves downloading the chart archive, extracting its contents and register
// the corresponding package.
func (w *Worker) handleRegisterJob(j *Job) {
	name := j.ChartVersion.Metadata.Name
	version := j.ChartVersion.Metadata.Version

	defer func() {
		if r := recover(); r != nil {
			w.logger.Error().
				Str("package", name).
				Str("version", version).
				Bytes("stacktrace", debug.Stack()).
				Interface("recover", r).
				Msg("handleRegisterJob panic")
		}
	}()

	// Prepare chart archive url
	u, err := url.Parse(j.ChartVersion.URLs[0])
	if err != nil {
		w.warn(name, version, fmt.Errorf("invalid chart url %s: %w", w.r.URL, err))
		return
	}
	if !u.IsAbs() {
		repoURL, _ := url.Parse(w.r.URL)
		u.Scheme = repoURL.Scheme
		u.Host = repoURL.Host
		if !strings.HasPrefix(u.Path, "/") {
			u.Path = path.Join(repoURL.Path, u.Path)
		}
	}
	chartURL := u.String()

	// Load chart from remote archive
	chart, err := w.loadChart(chartURL)
	if err != nil {
		w.warn(name, version, fmt.Errorf("error loading chart (%s): %w", chartURL, err))
		return
	}
	hcMD := chart.Metadata

	// Store logo when available if requested
	var logoURL, logoImageID string
	if j.StoreLogo && hcMD.Icon != "" {
		logoURL = hcMD.Icon
		data, err := w.getImage(hcMD.Icon)
		if err != nil {
			w.warn(name, version, fmt.Errorf("error getting image %s: %w", hcMD.Icon, err))
		} else {
			logoImageID, err = w.svc.Is.SaveImage(w.svc.Ctx, data)
			if err != nil && !errors.Is(err, image.ErrFormat) {
				w.warn(name, version, fmt.Errorf("error saving image %s: %w", hcMD.Icon, err))
			}
		}
	}

	// Prepare package to be registered
	p := &hub.Package{
		Name:        hcMD.Name,
		LogoURL:     logoURL,
		LogoImageID: logoImageID,
		Description: hcMD.Description,
		Keywords:    hcMD.Keywords,
		HomeURL:     hcMD.Home,
		Version:     hcMD.Version,
		AppVersion:  hcMD.AppVersion,
		Digest:      j.ChartVersion.Digest,
		Deprecated:  hcMD.Deprecated,
		ContentURL:  chartURL,
		CreatedAt:   j.ChartVersion.Created.Unix(),
		Repository:  w.r,
	}
	readme := getFile(chart, "README.md")
	if readme != nil {
		p.Readme = string(readme.Data)
	}
	licenseFile := getFile(chart, "LICENSE")
	if licenseFile != nil {
		p.License = license.Detect(licenseFile.Data)
	}
	hasProvenanceFile, err := w.chartVersionHasProvenanceFile(chartURL)
	if err == nil {
		p.Signed = hasProvenanceFile
	} else {
		w.warn(name, version, fmt.Errorf("error checking provenance file: %w", err))
	}
	var maintainers []*hub.Maintainer
	for _, entry := range hcMD.Maintainers {
		if entry.Email != "" {
			maintainers = append(maintainers, &hub.Maintainer{
				Name:  entry.Name,
				Email: entry.Email,
			})
		}
	}
	links := make([]*hub.Link, 0, len(hcMD.Sources))
	for _, sourceURL := range hcMD.Sources {
		links = append(links, &hub.Link{
			Name: "source",
			URL:  sourceURL,
		})
	}
	if len(links) > 0 {
		p.Links = links
	}
	if len(maintainers) > 0 {
		p.Maintainers = maintainers
	}
	if strings.Contains(strings.ToLower(hcMD.Name), "operator") {
		p.IsOperator = true
	}
	dependencies := make([]map[string]string, 0, len(hcMD.Dependencies))
	for _, dependency := range hcMD.Dependencies {
		dependencies = append(dependencies, map[string]string{
			"name":       dependency.Name,
			"version":    dependency.Version,
			"repository": dependency.Repository,
		})
	}
	if len(dependencies) > 0 {
		p.Data = map[string]interface{}{
			"dependencies": dependencies,
		}
	}

	// Enrich package with info from Artifact Hub metadata file when available
	ahMDFile := getFile(chart, hub.PackageMetadataFile)
	if ahMDFile != nil {
		var ahMD *hub.PackageMetadata
		if err := yaml.Unmarshal(ahMDFile.Data, &ahMD); err != nil {
			w.warn(name, version, fmt.Errorf("error unmarshaling artifact hub metadata file: %w", err))
		} else if ahMD != nil {
			if err := pkg.EnrichPackageFromMetadata(p, ahMD); err != nil {
				w.warn(name, version, fmt.Errorf("error enriching package: %w", err))
			}
		}
	}

	// Register package
	w.logger.Debug().Str("name", hcMD.Name).Str("v", hcMD.Version).Msg("registering package")
	if err := w.svc.Pm.Register(w.svc.Ctx, p); err != nil {
		w.warn(name, version, fmt.Errorf("error registering package: %w", err))
	}
}

// handleUnregisterJob handles the provided Helm package unregistration job.
// This involves deleting the package version corresponding to a given chart
// version.
func (w *Worker) handleUnregisterJob(j *Job) {
	// Unregister package
	name := j.ChartVersion.Name
	version := j.ChartVersion.Version
	p := &hub.Package{
		Name:       name,
		Version:    version,
		Repository: w.r,
	}
	w.logger.Debug().Str("name", p.Name).Str("v", p.Version).Msg("unregistering package")
	if err := w.svc.Pm.Unregister(w.svc.Ctx, p); err != nil {
		w.warn(name, version, fmt.Errorf("error unregistering package: %w", err))
	}
}

// loadChart loads a chart from a remote archive located at the url provided.
func (w *Worker) loadChart(u string) (*chart.Chart, error) {
	// Rate limit requests to Github to avoid them being rejected
	if strings.HasPrefix(u, "https://github.com") {
		_ = githubRL.Wait(w.svc.Ctx)
	}

	resp, err := w.svc.Hg.Get(u)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode == http.StatusOK {
		chart, err := loader.LoadArchive(resp.Body)
		if err != nil {
			return nil, err
		}
		return chart, nil
	}
	return nil, fmt.Errorf("unexpected status code received: %d", resp.StatusCode)
}

// chartVersionHasProvenanceFile checks if a chart version has a provenance
// file checking if a .prov file exists for the chart version url provided.
func (w *Worker) chartVersionHasProvenanceFile(u string) (bool, error) {
	resp, err := w.svc.Hg.Get(u + ".prov")
	if err != nil {
		return false, err
	}
	defer resp.Body.Close()
	if resp.StatusCode == http.StatusOK {
		return true, nil
	}
	return false, nil
}

// getImage gets the image located at the url provided. If it's a data url the
// image is extracted from it. Otherwise it's downloaded using the url.
func (w *Worker) getImage(u string) ([]byte, error) {
	// Image in data url
	if strings.HasPrefix(u, "data:") {
		dataURL, err := dataurl.DecodeString(u)
		if err != nil {
			return nil, err
		}
		return dataURL.Data, nil
	}

	// Download image using url provided
	resp, err := w.svc.Hg.Get(u)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	if resp.StatusCode == http.StatusOK {
		return ioutil.ReadAll(resp.Body)
	}
	return nil, fmt.Errorf("unexpected status code received: %d", resp.StatusCode)
}

// warn is a helper that sends the error provided to the errors collector and
// logs it as a warning.
func (w *Worker) warn(name, version string, err error) {
	err = fmt.Errorf("%s (package: %s version: %s)", err.Error(), name, version)
	w.svc.Ec.Append(w.r.RepositoryID, err)
	w.logger.Warn().Err(err).Send()
}

// getFile returns the file requested from the provided chart.
func getFile(chart *chart.Chart, name string) *chart.File {
	for _, file := range chart.Files {
		if file.Name == name {
			return file
		}
	}
	return nil
}
